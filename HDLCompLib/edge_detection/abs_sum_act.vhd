-- -------------------------------------------------------------------------------
-- This file has been automatically generated by the Caph compiler (version 2.8.4d)
-- from file main.cph, on 2018-05-11 at 12:39:30, by <unknown>
-- For more information, see : http://caph.univ-bpclermont.fr
-- -------------------------------------------------------------------------------

library ieee,caph,work;
use ieee.std_logic_1164.all;
use caph.core.all;
use caph.data_types.all;
use ieee.numeric_std.all;
use work.all;
use work.edgeDetectionOk_globals.all;

entity abs_sum is
   port (
    in_gx_empty: in std_logic;
    in_gx: in std_logic_vector(13 downto 0);
    in_gx_rd: out std_logic;
    in_gy_empty: in std_logic;
    in_gy: in std_logic_vector(13 downto 0);
    in_gy_rd: out std_logic;
    out_g_full: in std_logic;
    out_g: out std_logic_vector(13 downto 0);
    out_g_wr: out std_logic;
    clock: in std_logic;
    reset: in std_logic
    );
end abs_sum;

architecture FSM of abs_sum is
begin
  comb: process(in_gx, in_gx_empty, in_gy, in_gy_empty, out_g_full)
    variable p_gx : signed(13 downto 0);
    variable p_gy : signed(13 downto 0);
  begin
    -- in_gy.rdy, in_gx.rdy, out_g.rdy / p_gy=in_gy, p_gx=in_gx, wr(out_g,fabs(p_gx)+fabs(p_gy))
    if in_gy_empty='0' and in_gx_empty='0' and out_g_full='0' then
      p_gy := from_std_logic_vector(in_gy,14);
      in_gy_rd <= '1';
      p_gx := from_std_logic_vector(in_gx,14);
      in_gx_rd <= '1';
      out_g <= std_logic_vector((fabs(p_gx)) + (fabs(p_gy)));
      out_g_wr <= '1';
    else
      in_gx_rd <= '0';
      in_gy_rd <= '0';
      out_g_wr <= '0';
      out_g <= (others => 'X');
    end if;
  end process;
  seq: process(clock, reset)
  begin
    if (reset='0') then
    elsif rising_edge(clock) then
    end if;
  end process;
end FSM;
